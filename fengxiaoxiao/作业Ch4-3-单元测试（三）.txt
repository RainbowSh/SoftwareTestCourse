什么是测试替身？简要说明5种测试替身的具体实现
1.测试替身：	有时候对被测系统进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件。
               		组件不可用
			不会返回测试所需要的结果
			执行组件会有不良副作用
			要求对被测系统的内部行为有更多控制或更多可见性
	    	测试替身是出于运行测试这一明确目的而安装代替实际组件的任何对象或组件。

2.哑元对象：    哑元对象是作为参数（或参数属性）传递给被测对象但实际上从未使用的占位符对象
		只是一个接口的实现，不会在测试中被使用，也不会影响代码的行为
		简单地说，哑元对象是用来解决对象使用时的编译问题

  测试桩：	测试桩是一种对象，用于取代被测对象依赖的实际组件，以便测试可以控制被测对象的间接输入
		允许执行被测对象中的未测试路径
		测试桩用于验证间接输入


  测试间谍：	测试间谍是作为被测对象间接输出观察点的对象
		如果一个测试桩维护了内部状态，并用来做断言检查，那么它就是测试间谍
		测试的验证部分使用一系列断言将测试间谍收到的实际调用与预期调用进行比较，从而实现这些调用上的过程行为验证


  伪造对象：	用相同功能性的可选实现方式取代实际被依赖对象的功能性
		伪造对象用相同功能性的可选实现方式取代实际被依赖对象的功能性
		能够像真实的对象一样与测试对象进行交互
		以更简单的方法实现与被依赖对象相同的功能或其子集
		使用伪造对象通常是因为：还没有建立实际的被依赖对象，或者它太缓慢，或者在测试环境中不可用


  仿制对象：	Mock是基于行为（Behavior）进行断言的
		Mock在特定情景下可配置行为
		如果有意外发生，Mock可以立即使测试失败，这使得测试变得更加精确
		例如：期望调用foo()并且携带参数bar；如果没有达到期望，就会报错




基于状态的测试和基于交互的测试有什么区别？
	基于状态的测试利用被测对象内部状态来验证执行结果的正确性。
  	将待测对象及其协作对象的状态与期望的状态进行对比验证
基于交互的测试验证待测对象与其协作对象以期望的方式进行交互。
  	是否正确调用了协作对象的方法
  	是否使用了正确的参数
  	调用顺序是否正确
