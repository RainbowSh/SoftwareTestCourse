/***********Table.java*************/
public class Table {
	String tableDefineStr;
	public Table(String tableDefineStr){
		this.tableDefineStr=tableDefineStr;
	}
	
	public String getInnerContent(String label,String xmlStr){
		int beginIndex=xmlStr.indexOf("<"+label+">");
		int endIndex=xmlStr.indexOf("</"+label+">");
		beginIndex+=("<"+label+">").length();
		String innerContent= xmlStr.substring(beginIndex, endIndex);
		return innerContent;
	}

	public String getName() {
		return getInnerContent("Name",tableDefineStr);
	}

	public int getFieldCount() {
		return Integer.parseInt(getInnerContent("FieldCount",tableDefineStr));
	}

	public int getRecordCount() {
		return Integer.parseInt(getInnerContent("RecordCount",tableDefineStr));
	}

	public String getNameInField1() {
		return getInnerContent("Name",getInnerContent("Field1",tableDefineStr));
	}

	public String getDataTypeInField1() {
		return getInnerContent("DataType",getInnerContent("Field1",tableDefineStr));
	}

	public int getSizeInField1() {
		return Integer.parseInt(getInnerContent("Size",getInnerContent("Field1",tableDefineStr)));
	}

	public int getPrecisionInField1() {
		return Integer.parseInt(getInnerContent("Precision",getInnerContent("Field1",tableDefineStr)));
	}

	public String getNameInField2() {
		return getInnerContent("Name",getInnerContent("Field2",tableDefineStr));
	}

	public String getDataTypeInField2() {
		return getInnerContent("DataType",getInnerContent("Field2",tableDefineStr));
	}

	public int getSizeInField2() {
		return Integer.parseInt(getInnerContent("Size",getInnerContent("Field2",tableDefineStr)));
	}

	public int getPrecisionInField2() {
		return Integer.parseInt(getInnerContent("Precision",getInnerContent("Field2",tableDefineStr)));
	}

	public String getField1InRecord0() {
		return getInnerContent("field1",getInnerContent("Record0",tableDefineStr));
	}

	public int getField2InRecord0() {
		return Integer.parseInt(getInnerContent("field2",getInnerContent("Record0",tableDefineStr)));
	}

	public String getField1InRecord1() {
		return getInnerContent("field1",getInnerContent("Record1",tableDefineStr));
	}

	public int getField2InRecord1() {
		return Integer.parseInt(getInnerContent("field2",getInnerContent("Record1",tableDefineStr)));
	}

}
/***********************TableDefineParser.java*************************************/
import java.lang.*;

public class TableDefineParser {
	public Table parse(String tableDefineStr) {
		Table table=new Table(tableDefineStr);
		return table;	
	}
}
/***************RecordDefineParser.java**********************/
public class RecordDefineParser {
	public Table parse(String tableDefineStr) {
		Table table=new Table(tableDefineStr);
		return table;		
	}
}
/************************FieldDefineParser.java***********************/
public class FieldDefineParser {
	public Table parse(String tableDefineStr) {
		Table table=new Table(tableDefineStr);
		return table;		
	}
}
/*******************TableDefinePaserTest.java*************************/
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * @author LittleLmp
 *
 */
public class TableDefinePaserTest {

	@Test

	public void shouldParseTableDefineToTable()throws Exception {
		String tableDefineStr="<Description>"+
									"<Name>Table</Name>"+
									"<FieldCount>1</FieldCount>"+
									"<RecordCount>2</RecordCount>"+
							  "</Description>";
		TableDefineParser parser=new TableDefineParser();
		//Act
		Table actual=parser.parse(tableDefineStr);
		
		//Assert
		assertEquals("Table",actual.getName());
		assertEquals(1,actual.getFieldCount());
		assertEquals(2,actual.getRecordCount());
	}
}
/**************RecordDefineParserTest.java**************/
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * @author lixinyi
 *
 */
public class RecordDefineParserTest {

	@Test

	public void shouldParseRecordDefineToRecord()throws Exception{
		String recordDefineStr="<Records>"+
									"<Record0>"+
										"<field1>F140</field1>"+
										"<field2>00</field2>"+
									"</Record0>"+
									"<Record1>"+
										"<field1>F140</field1>"+
										"<field2>11</field2>"+
									"</Record1>"+
								"</Records>";
		RecordDefineParser paser=new RecordDefineParser();
		//Act
		Table actual=paser.parse(recordDefineStr);
		
		//Assert
		assertEquals("F140", actual.getField1InRecord0());
		assertEquals(00, actual.getField2InRecord0());
		
		assertEquals("F140", actual.getField1InRecord1());
		assertEquals(11, actual.getField2InRecord1());
	}

}
/*********************FieldDefinePaserTest.java******************/
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * @author lixinyi
 *
 */
public class FieldDefinePaserTest {

	@Test

	public void shouldParseFieldDefineToField()throws Exception{
		String fieldDefineStr="<FieldDefs>"+
									"<Field1>"+
										"<Name>No</Name>"+
										"<DataType>VARCHAR</DataType>"+
										"<Size>1</Size>"+
										"<Precision>1</Precision>"+
									"</Field1>"+
									"<Field2>"+
										"<Name>Age</Name>"+
										"<DataType>INT</DataType>"+
										"<Size>1</Size>"+
										"<Precision>1</Precision>"+
									"</Field2>"+
								"</FieldDefs>";
		FieldDefineParser parser=new FieldDefineParser();
		//Act
		Table actual=parser.parse(fieldDefineStr);
		
		//Assert
		assertEquals("No",actual.getNameInField1());
		assertEquals("VARCHAR",actual.getDataTypeInField1());
		assertEquals(1,actual.getSizeInField1());
		assertEquals(1,actual.getPrecisionInField1());
		
		assertEquals("Age",actual.getNameInField2());
		assertEquals("INT",actual.getDataTypeInField2());
		assertEquals(12,actual.getSizeInField2());
		assertEquals(12,actual.getPrecisionInField2());
									
	}
}
